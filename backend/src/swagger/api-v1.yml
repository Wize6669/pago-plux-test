openapi: 3.0.0
info:
  title: Payment API
  description: API for user authentication, payments, and transaction management.
  version: 1.0.0
servers:
  - url: http://localhost:3001
    description: Development Server

paths:
  /health:
    get:
      summary: Check API health
      tags:
        - System
      responses:
        '200':
          description: Service is running correctly
          content:
            application/json:
              schema:
                type: string
                example: "Healthy"

  /api/v1/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationErrorResponse'
                  - $ref: '#/components/schemas/MultipleValidationErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExistsErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials or validation error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CredentialsErrorResponse'
                  - $ref: '#/components/schemas/ValidationErrorResponse'
                  - $ref: '#/components/schemas/MultipleValidationErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/transactions/getTransactionByIdStateResource:
    get:
      summary: Get transaction details by ID
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: transactionId
          in: query
          required: true
          description: Unique identifier of the transaction
          schema:
            type: string
            format: uuid
            example: "4aa93b80-577f-11eb-add8-83fc90ae146c"
      responses:
        '200':
          description: Transaction details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - name
        - surname
        - email
        - password
      properties:
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "supersecurepassword"

    RegisterResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "supersecurepassword"

    LoginResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

    TransactionResponse:
      type: object
      properties:
        transactionId:
          type: string
          format: uuid
          example: "4aa93b80-577f-11eb-add8-83fc90ae146c"
        status:
          type: string
          example: "Completed"
        amount:
          type: number
          format: float
          example: 100.50
        currency:
          type: string
          example: "USD"
        createdAt:
          type: string
          format: date-time
          example: "2024-03-22T10:30:00Z"

    UserExistsErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "User already exists"

    ValidationErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: "\"surname\" must be a string"
            path:
              type: string
              example: "surname"

    MultipleValidationErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Email is required"

    CredentialsErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid email or password"

    UnauthorizedErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Unauthorized - Token required or invalid"

    NotFoundErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Transaction not found"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Internal server error"
